/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface WorldTreasuryInterface extends utils.Interface {
  functions: {
    "claimRewards(uint256,bytes)": FunctionFragment;
    "getEthSignedMessageHash(bytes32)": FunctionFragment;
    "getNextHash(uint256)": FunctionFragment;
    "getRegisteredToken(string)": FunctionFragment;
    "getSigner(bytes32,bytes)": FunctionFragment;
    "getWorldBalance(string)": FunctionFragment;
    "registerToken(string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "getEthSignedMessageHash"
      | "getNextHash"
      | "getRegisteredToken"
      | "getSigner"
      | "getWorldBalance"
      | "registerToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;

  events: {
    "RewardsClaimed(uint256,address,uint256)": EventFragment;
    "TokenRegistered(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
}

export interface RewardsClaimedEventObject {
  degen: BigNumber;
  degenOwner: string;
  nonce: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TokenRegisteredEventObject {
  name: string;
  tokenAddress: string;
}
export type TokenRegisteredEvent = TypedEvent<
  [string, string],
  TokenRegisteredEventObject
>;

export type TokenRegisteredEventFilter = TypedEventFilter<TokenRegisteredEvent>;

export interface WorldTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorldTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      _degen: BigNumberish,
      _worldSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNextHash(
      _degen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRegisteredToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSigner(
      hash_: BytesLike,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    getWorldBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerToken(
      _name: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    _degen: BigNumberish,
    _worldSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEthSignedMessageHash(
    _messageHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getNextHash(_degen: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getRegisteredToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSigner(
    hash_: BytesLike,
    signature_: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  getWorldBalance(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerToken(
    _name: string,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      _degen: BigNumberish,
      _worldSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getNextHash(
      _degen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRegisteredToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSigner(
      hash_: BytesLike,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    getWorldBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerToken(
      _name: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RewardsClaimed(uint256,address,uint256)"(
      degen?: BigNumberish | null,
      degenOwner?: string | null,
      nonce?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      degen?: BigNumberish | null,
      degenOwner?: string | null,
      nonce?: null
    ): RewardsClaimedEventFilter;

    "TokenRegistered(string,address)"(
      name?: string | null,
      tokenAddress?: null
    ): TokenRegisteredEventFilter;
    TokenRegistered(
      name?: string | null,
      tokenAddress?: null
    ): TokenRegisteredEventFilter;
  };

  estimateGas: {
    claimRewards(
      _degen: BigNumberish,
      _worldSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextHash(
      _degen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigner(
      hash_: BytesLike,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerToken(
      _name: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      _degen: BigNumberish,
      _worldSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextHash(
      _degen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigner(
      hash_: BytesLike,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorldBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerToken(
      _name: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
