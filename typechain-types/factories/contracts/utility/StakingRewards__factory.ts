/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingRewards,
  StakingRewardsInterface,
} from "../../../contracts/utility/StakingRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "staked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userRewardPerTokenPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526601c6bf5263400060015534801561001b57600080fd5b5060405161083138038061083183398101604081905261003a9161005f565b600080546001600160a01b0319166001600160a01b039290921691909117905561008d565b600060208284031215610070578081fd5b81516001600160a01b0381168114610086578182fd5b9392505050565b6107958061009c6000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c806398807d841161007157806398807d8414610167578063a694fc3a14610190578063b88a802f146101a3578063c8f33c91146101ab578063cd3daf9d146101b4578063df136d65146101bc57600080fd5b80628cc262146100b85780630700037d146100de5780632e1a7d4d146100fe57806372f702f3146101135780637b0a47ee1461013e5780638b87634714610147575b600080fd5b6100cb6100c636600461065d565b6101c5565b6040519081526020015b60405180910390f35b6100cb6100ec36600461065d565b60056020526000908152604090205481565b61011161010c3660046106ab565b610242565b005b600054610126906001600160a01b031681565b6040516001600160a01b0390911681526020016100d5565b6100cb60015481565b6100cb61015536600461065d565b60046020526000908152604090205481565b6100cb61017536600461065d565b6001600160a01b031660009081526007602052604090205490565b61011161019e3660046106ab565b61034d565b610111610581565b6100cb60025481565b6100cb6105fe565b6100cb60035481565b6001600160a01b0381166000908152600560209081526040808320546004909252822054670de0b6b3a7640000906101fb6105fe565b6102059190610732565b6001600160a01b0385166000908152600760205260409020546102289190610713565b61023291906106f3565b61023c91906106db565b92915050565b3361024b6105fe565b6003554260025561025b816101c5565b6001600160a01b0382166000908152600560209081526040808320939093556003546004909152918120919091556006805484929061029b908490610732565b909155505033600090815260076020526040812080548492906102bf908490610732565b909155505060005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561031057600080fd5b505af1158015610324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610348919061068b565b505050565b336103566105fe565b60035542600255610366816101c5565b6001600160a01b038216600090815260056020908152604080832093909355600354600490915291812091909155600680548492906103a69084906106db565b909155505033600090815260076020526040812080548492906103ca9084906106db565b909155505060008054604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e9060440160206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906106c3565b9050828110156104a15760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b60448201526064015b60405180910390fd5b600080546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c919061068b565b90508061057b5760405162461bcd60e51b815260206004820152601a60248201527f4661696c656420746f207472616e7366657220746f6b656e732e0000000000006044820152606401610498565b50505050565b3361058a6105fe565b6003554260025561059a816101c5565b6001600160a01b0382166000908152600560208181526040808420949094556003546004825284842055338084529190528282208054908390559251909183156108fc02918491818181858888f19350505050158015610348573d6000803e3d6000fd5b600060065460001415610612575060035490565b6006546001546002546106259042610732565b61062f9190610713565b61064190670de0b6b3a7640000610713565b61064b91906106f3565b60035461065891906106db565b905090565b60006020828403121561066e578081fd5b81356001600160a01b0381168114610684578182fd5b9392505050565b60006020828403121561069c578081fd5b81518015158114610684578182fd5b6000602082840312156106bc578081fd5b5035919050565b6000602082840312156106d4578081fd5b5051919050565b600082198211156106ee576106ee610749565b500190565b60008261070e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561072d5761072d610749565b500290565b60008282101561074457610744610749565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205ea30a054559fd7ba7882b5265a1b714373f9783bf1fc062e42764586725136d64736f6c63430008040033";

type StakingRewardsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingRewardsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingRewards__factory extends ContractFactory {
  constructor(...args: StakingRewardsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingRewards> {
    return super.deploy(
      _stakingToken,
      overrides || {}
    ) as Promise<StakingRewards>;
  }
  override getDeployTransaction(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_stakingToken, overrides || {});
  }
  override attach(address: string): StakingRewards {
    return super.attach(address) as StakingRewards;
  }
  override connect(signer: Signer): StakingRewards__factory {
    return super.connect(signer) as StakingRewards__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsInterface {
    return new utils.Interface(_abi) as StakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewards {
    return new Contract(address, _abi, signerOrProvider) as StakingRewards;
  }
}
