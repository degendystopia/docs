/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignerManager,
  SignerManagerInterface,
} from "../../../../../@divergencetech/ethier/contracts/crypto/SignerManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "addSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "removeSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61044a8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e316ab71461005c578063715018a6146100715780638da5cb5b14610079578063eb12d61e14610098578063f2fde38b146100ab575b600080fd5b61006f61006a3660046103c3565b6100be565b005b61006f6100d5565b600054604080516001600160a01b039092168252519081900360200190f35b61006f6100a63660046103c3565b6100e9565b61006f6100b93660046103c3565b6100fc565b6100c661017a565b6100d16001826101d4565b5050565b6100dd61017a565b6100e760006101f2565b565b6100f161017a565b6100d1600182610242565b61010461017a565b6001600160a01b03811661016e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610177816101f2565b50565b6000546001600160a01b031633146100e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610165565b60006101e9836001600160a01b038416610257565b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006101e9836001600160a01b038416610374565b6000818152600183016020526040812054801561036a57600061027b6001836103f1565b855490915060009061028f906001906103f1565b90508181146103105760008660000182815481106102bd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106102ee57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061032f57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506101ec565b60009150506101ec565b60008181526001830160205260408120546103bb575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556101ec565b5060006101ec565b6000602082840312156103d4578081fd5b81356001600160a01b03811681146103ea578182fd5b9392505050565b60008282101561040f57634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220c3552fecb8380f312fc38502b77c9ead3b4a5c8722b35df801711c05eff5e55464736f6c63430008040033";

type SignerManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignerManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignerManager__factory extends ContractFactory {
  constructor(...args: SignerManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignerManager> {
    return super.deploy(overrides || {}) as Promise<SignerManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignerManager {
    return super.attach(address) as SignerManager;
  }
  override connect(signer: Signer): SignerManager__factory {
    return super.connect(signer) as SignerManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignerManagerInterface {
    return new utils.Interface(_abi) as SignerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignerManager {
    return new Contract(address, _abi, signerOrProvider) as SignerManager;
  }
}
